# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

enum EPagePartType {
  CODE
  MD
}

enum ERights {
  ADMIN
  ANON
  REGISTERED
}

union GetPagesUnion = Page | PageList

type Mutation {
  addPage(auth: UserAuthInput!, lid: ID!, pageIn: PageInput!): Page!
  createAnon: User!
  createPageList(auth: UserAuthInput!, pageListIn: PageListInput!): PageList!
  createUser(auth: UserAuthInput!, login: String!, password: String!, userIn: UserRightsInput!): User!
  insertPagePart(auth: UserAuthInput!, lid: ID!, part: PartInput!, pid: ID!): Part!
  updatePagePart(auth: UserAuthInput!, lid: ID!, part: PartChangeInput!, pid: ID!): Part!
  updateUser(auth: UserAuthInput!, data: UserChangeInput!): User!
}

type Page {
  data: PageData!
  id: ID!
}

type PageData {
  name: String!
  parts: [Part!]!
}

input PageInput {
  name: String!
  parts: [PartDataInput!]!
}

type PageList {
  data: PageListData!
  id: ID!
}

type PageListData {
  pages: [Page!]!
  rights: ERights!
  usersAllowed: [String!]!
}

input PageListInput {
  rights: ERights!
  usersAllowed: [String!]!
}

type Part {
  data: PartData!
  id: ID!
}

input PartChangeInput {
  data: PartDataInput!
  id: ID!
  swapid: ID
}

type PartData {
  content: String!
  type: EPagePartType!
}

input PartDataInput {
  content: String!
  type: EPagePartType!
}

input PartInput {
  data: PartDataInput!
  id: ID!
}

type Query {
  getPages(auth: UserAuthInput!, lid: ID!, pids: [ID!]): [GetPagesUnion!]!
  getUserData(auth: UserAuthInput!): User!
  getUsers(auth: UserAuthInput!): [User!]!
}

type User {
  data: UserData!
  id: ID!
}

input UserAuthInput {
  csrf: String
  login: String
  password: String
}

input UserChangeInput {
  login: String
  password: String
  rights: ERights
}

type UserData {
  csrf: String!
  login: String!
  password: String!
  rights: ERights!
}

input UserRightsInput {
  rights: ERights!
}
